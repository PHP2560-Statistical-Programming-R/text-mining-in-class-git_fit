group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(total))
# ANother way of tracking anticipation would be to look at the proportion of words which have an anticipation sentiment rather than looking at the raw usage of the words :
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence))
total_words%>%
#filter(title=="philosophers_stone") %>%
#inner_join(get_sentiments("nrc")) %>%
#group_by(chapter)%>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion),color="red"))+geom_line()
# ANother way of tracking anticipation would be to look at the proportion of words which have an anticipation sentiment rather than looking at the raw usage of the words :
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence))
total_words%>%
#filter(title=="philosophers_stone") %>%
#inner_join(get_sentiments("nrc")) %>%
#group_by(chapter)%>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion),color="red")+geom_line()
total_words
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence))
total_words%>%
#filter(title=="philosophers_stone") %>%
#inner_join(get_sentiments("nrc")) %>%
#group_by(chapter)%>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
# ANother way of tracking anticipation would be to look at the proportion of words which have an anticipation sentiment rather than looking at the raw usage of the words :
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence))
total_words%>%
#filter(title=="philosophers_stone") %>%
#inner_join(get_sentiments("nrc")) %>%
#group_by(chapter)%>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion),color="red")+geom_line()
# ANother way of tracking anticipation would be to look at the proportion of words which have an anticipation sentiment rather than looking at the raw usage of the words :
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence))
total_words%>%
#filter(title=="philosophers_stone") %>%
#inner_join(get_sentiments("nrc")) %>%
#group_by(chapter)%>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion))+geom_line()
# ANother way of tracking anticipation would be to look at the proportion of words which have an anticipation sentiment rather than looking at the raw usage of the words :
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion))+geom_line()
# ANother way of tracking anticipation would be to look at the proportion of words which have an anticipation sentiment rather than looking at the raw usage of the words :
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="red")+geom_line()
# ANother way of tracking anticipation would be to look at the proportion of words which have an anticipation sentiment rather than looking at the raw usage of the words :
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="red"))+geom_line()
# I can also use a different lexicon that assings a score rather than saying positive and negative. Affin lexicon
affin_lex<-
books %>%
filter(title=="philosophers_stone")%>%
inner_join(get_sentiments("afinn"))%>%  # This lexicon assigns a score from -5 to +5 based on negative and positive
group_by(chapter) %>%
summarize(total_score=sum(score)) # what is the total score for each chapter. Do some chapters tend to be more positive than negative
library(dplyr)
# I can also use a different lexicon that assings a score rather than saying positive and negative. Affin lexicon
affin_lex<-
books %>%
filter(title=="philosophers_stone")%>%
inner_join(get_sentiments("afinn"))%>%  # This lexicon assigns a score from -5 to +5 based on negative and positive
group_by(chapter) %>%
summarize(total_score=sum(score)) # what is the total score for each chapter. Do some chapters tend to be more positive than negative
library(tidyverse)
# I can also use a different lexicon that assings a score rather than saying positive and negative. Affin lexicon
affin_lex<-
books %>%
filter(title=="philosophers_stone")%>%
inner_join(get_sentiments("afinn"))%>%  # This lexicon assigns a score from -5 to +5 based on negative and positive
group_by(chapter) %>%
summarize(total_score=sum(score)) # what is the total score for each chapter. Do some chapters tend to be more positive than negative
library(tidytext)
library(stringr)
library(ggplot2)
# I can also use a different lexicon that assings a score rather than saying positive and negative. Affin lexicon
affin_lex<-
books %>%
filter(title=="philosophers_stone")%>%
inner_join(get_sentiments("afinn"))%>%  # This lexicon assigns a score from -5 to +5 based on negative and positive
group_by(chapter) %>%
summarize(total_score=sum(score)) # what is the total score for each chapter. Do some chapters tend to be more positive than negative
ggplot(affin_lex, aes(x = chapter, y = total_score)) +
geom_line(col="darkblue")   # plotting the sentiment over each chapter in the book based on score
# ANother way of tracking anticipation would be to look at the proportion of words which have an anticipation sentiment rather than looking at the raw usage of the words :
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="red"))+geom_line()
# it appears that JK rowling really takes the reader for a ride emotionally with her first book. Notice the proportion of words that have an anticipation sentiment rise and fall quite sharply from chapter to chapter.
philosophers_stone<-
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))
philosophers_stone
philosophers_stone %>%
group_by(word) %>%
count(word)
philosophers_stone %>%
mutate(total_word_count=count(word)) %>%
group_by(word) %>%
count(word)
philosophers_stone %>%
mutate(total_word_count=count(word))
philosophers_stone %>%
count(word) %>%
group_by(word) %>%
count(word)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)
arrange(n)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(10)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
ggplot(aes(word,n))+geom_bar()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
ggplot(aes(word,n))+geom_bar(stat="identity")
?top_n
names(philosophers_stone)
table(philosophers_stone$chapter)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
arrange() %>%
top_n(17) %>%
ggplot(aes(word,n))+geom_bar(stat="identity")
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
arrange() %>%
top_n(17)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
arrange() %>%
top_n(1)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
arrange(desc(n))
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(10) %>%
ggplot(aes(word,n))+geom_bar(stat="identity")
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(5) %>%
ggplot(aes(word,n))+geom_bar(stat="identity")
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(3) %>%
ggplot(aes(word,n))+geom_bar(stat="identity")
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(3) %>%
ggplot(aes(word,n))+geom_col(stat="identity")
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(3) %>%
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(3)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(1) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(1) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity")
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(1)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
table() %>%
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
table(total_words
)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity",col="deeppink3")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n,,col="deeppink3"))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n,col="deeppink3"))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(col="deeppink3",stat="identity")+
coord_flip()
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="deeppink3"))+geom_line()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word,sort=TRUE)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word,sort=TRUE)
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="yellow4"))+geom_line()
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="yellow3"))+geom_line()
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="deeppink3"))+geom_line()
philosophers_stone %>%
group_by(chapter,word,sentiment) %>%
count(word,sort=TRUE)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n,fill=sentiment))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word,sort=TRUE)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(sentiment) %>%
top_n(10)%>%
ungroup()%>%
mutate(word=reorder(word,n)) %>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(sentiment) %>%
top_n(10)%>%
ungroup()
philosophers_stone %>%
group_by(sentiment) %>%
top_n(10)%>%
ungroup()%>%
count(word)
philosophers_stone %>%
group_by(sentiment) %>%
top_n(10)%>%
count(word)
philosophers_stone %>%
group_by(sentiment) %>%
top_n(10)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(sentiment) %>%
top_n(5)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(chapter,sentiment) %>%
top_n(5)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(chapter,sentiment) %>%
top_n(2)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(chapter,sentiment) %>%
top_n(1)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(chapter,sentiment)
philosophers_stone %>%
group_by(sentiment)
philosophers_stone %>%
group_by(sentiment) %
philosophers_stone %>%
group_by(sentiment)
philosophers_stone %>%
group_by(chapter)
philosophers_stone %>%
group_by(chapter) %>%
top_n(3)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(chapter,sentiment) %>%
top_n(3)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(sentiment) %>%
top_n(3)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(sentiment) %>%
top_n(3)%>%
count(word)
philosophers_stone %>%
group_by(sentiment) %>%
count(word)%>%
top_n(3)
philosophers_stone %>%
group_by(sentiment) %>%
count(word)%>%
top_n(10)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(sentiment) %>%
count(word)%>%
top_n(10)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
