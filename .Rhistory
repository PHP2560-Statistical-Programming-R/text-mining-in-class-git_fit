total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="red"))+geom_line()
# it appears that JK rowling really takes the reader for a ride emotionally with her first book. Notice the proportion of words that have an anticipation sentiment rise and fall quite sharply from chapter to chapter.
philosophers_stone<-
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))
philosophers_stone
philosophers_stone %>%
group_by(word) %>%
count(word)
philosophers_stone %>%
mutate(total_word_count=count(word)) %>%
group_by(word) %>%
count(word)
philosophers_stone %>%
mutate(total_word_count=count(word))
philosophers_stone %>%
count(word) %>%
group_by(word) %>%
count(word)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)
arrange(n)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(10)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
ggplot(aes(word,n))+geom_bar()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
ggplot(aes(word,n))+geom_bar(stat="identity")
?top_n
names(philosophers_stone)
table(philosophers_stone$chapter)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
arrange() %>%
top_n(17) %>%
ggplot(aes(word,n))+geom_bar(stat="identity")
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
arrange() %>%
top_n(17)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
arrange() %>%
top_n(1)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
arrange(desc(n))
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(10) %>%
ggplot(aes(word,n))+geom_bar(stat="identity")
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(5) %>%
ggplot(aes(word,n))+geom_bar(stat="identity")
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(3) %>%
ggplot(aes(word,n))+geom_bar(stat="identity")
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(3) %>%
ggplot(aes(word,n))+geom_col(stat="identity")
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(3) %>%
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(3)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(1) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(1) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity")
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(1)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
table() %>%
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
table(total_words
)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity",col="deeppink3")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n,,col="deeppink3"))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n,col="deeppink3"))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(col="deeppink3",stat="identity")+
coord_flip()
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="deeppink3"))+geom_line()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word,sort=TRUE)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word,sort=TRUE)
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="yellow4"))+geom_line()
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="yellow3"))+geom_line()
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="deeppink3"))+geom_line()
philosophers_stone %>%
group_by(chapter,word,sentiment) %>%
count(word,sort=TRUE)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n,fill=sentiment))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word,sort=TRUE)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(sentiment) %>%
top_n(10)%>%
ungroup()%>%
mutate(word=reorder(word,n)) %>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(sentiment) %>%
top_n(10)%>%
ungroup()
philosophers_stone %>%
group_by(sentiment) %>%
top_n(10)%>%
ungroup()%>%
count(word)
philosophers_stone %>%
group_by(sentiment) %>%
top_n(10)%>%
count(word)
philosophers_stone %>%
group_by(sentiment) %>%
top_n(10)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(sentiment) %>%
top_n(5)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(chapter,sentiment) %>%
top_n(5)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(chapter,sentiment) %>%
top_n(2)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(chapter,sentiment) %>%
top_n(1)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(chapter,sentiment)
philosophers_stone %>%
group_by(sentiment)
philosophers_stone %>%
group_by(sentiment) %
philosophers_stone %>%
group_by(sentiment)
philosophers_stone %>%
group_by(chapter)
philosophers_stone %>%
group_by(chapter) %>%
top_n(3)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(chapter,sentiment) %>%
top_n(3)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(sentiment) %>%
top_n(3)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(sentiment) %>%
top_n(3)%>%
count(word)
philosophers_stone %>%
group_by(sentiment) %>%
count(word)%>%
top_n(3)
philosophers_stone %>%
group_by(sentiment) %>%
count(word)%>%
top_n(10)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(sentiment) %>%
count(word)%>%
top_n(10)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
library(tidytext)
library(dplyr)
library(tidytext)
library(stringr)
library(ggplot2)
install.packages(rebus)
install.packages("rebus")
library(rebus)
library(tidytext)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = FALSE)  # here I changed this setting to false because I want to filter for capital letters which are reqiured for proper nouns
books[[i]] <- data
}
books = vector(mode = "list", length = 7) # create an empty vector to store all the books
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = FALSE)  # here I changed this setting to false because I want to filter for capital letters which are reqiured for proper nouns
books[[i]] <- data
}
books <- plyr:: ldply(books, data.frame)
books_capital = vector(mode = "list", length = 7) # create an empty vector to store all the books
for(i in 1:length(books_capital)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = FALSE)  # here I changed this setting to false because I want to filter for capital letters which are reqiured for proper nouns
books_capital[[i]] <- data
}
books_captial <- plyr:: ldply(books_capital, data.frame)
View(books_captial)
books_capital = vector(mode = "list", length = 7) # create an empty vector to store all the books
for(i in 1:length(books_capital)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = FALSE)  # here I changed this setting to false because I want to filter for capital letters which are reqiured for proper nouns
books_capital[[i]] <- data
}
books_capital <- plyr:: ldply(books_capital, data.frame)  # make into a data frame
View(books_capital)
View(books_capital)
no.stop.words <- philosophers_stone %>%
# Remove stop words like articles "a","an", "and","the"
anti_join(stop_words)
no.stop.words
philosophers_stone<-
books %>%
filter(title=="philosophers_stone")
nrc_lex<-philosophers_stone %>%
inner_join(get_sentiments("nrc"))
nrc_lex %>%
group_by(chapter,word) %>%
count(word,sort=TRUE)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
no.stop.words <- philosophers_stone %>%
# Remove stop words like articles "a","an", "and","the"
anti_join(stop_words)
no.stop.words
View(philosophers_stone)
View(no.stop.words)
?stop_words
table(stop_words)
philosophers_stone%>%
filter(str_detect(word,UPPER %R% ANY_CHAR %>% ANY_CHAR %>% ANY_CHAR)) %>%
filter(!word %in% c( "The","They","What","There","It's","Then")) %>%
group_by(word)
philosophers_stone%>%
filter(str_detect(word,UPPER %R% ANY_CHAR %>% ANY_CHAR %>% ANY_CHAR))
library(stringr)
characters<-
philosophers_stone%>%
filter(str_detect(word,UPPER %R% ANY_CHAR %>% ANY_CHAR %>% ANY_CHAR))
library(rebus)
library(rebus)
philosophers_stone%>%
filter(str_detect(word,UPPER %R% ANY_CHAR %>% ANY_CHAR %>% ANY_CHAR))
library(dplyr)
philosophers_stone%>%
filter(str_detect(word,UPPER %R% ANY_CHAR %>% ANY_CHAR %>% ANY_CHAR))
pattern<-UPPER %R% ANY_CHAR
View(philosophers_stone)
philosophers_stone%>%
select(word) %>%
filter(str_detect(word,UPPER %R% ANY_CHAR %>% ANY_CHAR %>% ANY_CHAR))
install.packages(rebus)
install.packages("rebus")
install.packages("rebus")
install.packages("tidytext")
install.packages("tidytext")
library(rebus)
library(tidytext)
philosophers_stone%>%
select(word) %>%
filter(str_detect(word,UPPER %R% ANY_CHAR %>% ANY_CHAR %>% ANY_CHAR))
str_detect(c("hi","bye","yay"),pattern="y")
#I can also make this graph for each chapter
nrc_lex %>%
group_by(chapter) %>%  # i grouped it by sentiment
count(word)%>% # I count the number of times the word appears in the book
top_n(10)%>%  # I then select the top 10 words for each sentiment
ggplot(aes(word,n,fill=chapter))+ # I am making a plot that fills in the bar with the sentiment
geom_col(show.legend=FALSE)+ # this makes columns and excludes the legend
facet_wrap(~chapter,scales="free")+ # this feature tells R to make this graph for each sentiment
coord_flip() # flip the x and y axis
library(stringr)
POA <- filter(books,title=="prisoner_of_azkaban") %>%
select(word) %>%
# regular expression for character names
filter(str_detect(word, UPPER %R% ANY_CHAR %R% ANY_CHAR %R% ANY_CHAR)) %>%
# remove words that aren't character names
filter(!(word %in% c("The","They","What","There","It's","Then"))) %>%
filter(word != "Harry's", word != "Professor", word != "Gryffindor") %>%
# get frequency for most popular character names
group_by(word) %>%
dplyr::summarize(count=n()) %>%
arrange(desc(count))
# Plotting for top 9 names
ggplot(POA[1:9, ],aes(x=reorder(word,count),y=count)) +
geom_col(fill="cyan",color="blue") +
xlab("Characters") +
ggtitle("Most Popular Characters in Prisoner of Azkaban") +
# Put frequency labels next to bars
geom_text(aes(label = paste0(count)), nudge_y = 1) +
coord_flip()
library(rebus)
library(tidytext)
characters<-
philosophers_stone%>%
select(word) %>%
filter(str_detect(word,UPPER %R% ANY_CHAR %>% ANY_CHAR %>% ANY_CHAR)) %>%
filter(!word %in% c( "The","They","What","There","It's","Then")) %>%
group_by(word) %>%
summarise(count=n()) %>%
top_n(10)
philosophers_stone%>%
str_detect(word,UPPER %R% ANY_CHAR %>% ANY_CHAR %>% ANY_CHAR)
philosophers_stone%>%
select(word)%>%
str_detect(word,UPPER %R% ANY_CHAR %>% ANY_CHAR %>% ANY_CHAR)
characters<-
philosophers_stone%>%
select(word) %>%
filter(str_detect(word,UPPER %R% ANY_CHAR %R% ANY_CHAR %R% ANY_CHAR)) %>%
filter(!word %in% c( "The","They","What","There","It's","Then")) %>%
group_by(word) %>%
summarise(count=n()) %>%
top_n(10)
