<<<<<<< HEAD
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = TRUE)
books[[i]] <- data
}
book_names
book_names <- list(philosophers_stone, chamber_of_secrets, prisoner_of_azkaban, goblet_of_fire, order_of_the_phoenix, half_blood_prince, deathly_hallows)
book_names <- list(philosophers_stone, chamber_of_secrets, prisoner_of_azkaban, goblet_of_fire, order_of_the_phoenix, half_blood_prince, deathly_hallows)
names(book_names) <- c("philosophers_stone", "chamber_of_secrets", "prisoner_of_azkaban", "goblet_of_fire", "order_of_the_phoenix", "half_blood_prince", "deathly_hallows")
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = TRUE)
books[[i]] <- data
}
#Carol-Goblet of Fire:
#(1) How the sentiment changes across the entire book
bing <- get_sentiments("bing")
cs_book= books[[4]]
sentiment_4=inner_join(cs_book, bing)
philosophers_stone
library("harrypotter", lib.loc="~/Library/R/3.4/library")
book_names <- list(philosophers_stone, chamber_of_secrets, prisoner_of_azkaban, goblet_of_fire, order_of_the_phoenix, half_blood_prince, deathly_hallows)
names(book_names) <- c("philosophers_stone", "chamber_of_secrets", "prisoner_of_azkaban", "goblet_of_fire", "order_of_the_phoenix", "half_blood_prince", "deathly_hallows")
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = TRUE)
books[[i]] <- data
}
#Carol-Goblet of Fire:
#(1) How the sentiment changes across the entire book
bing <- get_sentiments("bing")
cs_book= books[[4]]
sentiment_4=inner_join(cs_book, bing)
philosophers_stone
book_names <- list(philosophers_stone, chamber_of_secrets, prisoner_of_azkaban, goblet_of_fire, order_of_the_phoenix, half_blood_prince, deathly_hallows)
names(book_names) <- c("philosophers_stone", "chamber_of_secrets", "prisoner_of_azkaban", "goblet_of_fire", "order_of_the_phoenix", "half_blood_prince", "deathly_hallows")
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = TRUE)
books[[i]] <- data
}
#Carol-Goblet of Fire:
#(1) How the sentiment changes across the entire book
bing <- get_sentiments("bing")
cs_book= books[[4]]
sentiment_4=inner_join(cs_book, bing)
sentiment_4 %>% count(sentiment)
sentiment_4
sentiment_4 %>% dplyr::count(sentiment)
sentiment_4 %>% dplyr::group_by(chapter) %>% dplyr::count(sentiment)
sentiment_4 %>% dplyr::group_by(chapter) %>% dplyr::count(sentiment) %>% sum(n)
sentiment_4 %>% dplyr::group_by(chapter) %>% dplyr::count(sentiment) %>% dplyr::sum(n)
sentiment_4 %>% dplyr::group_by(chapter) %>% dplyr::count(sentiment) %>% dplyr::count(n)
sentiment_4 %>% dplyr::group_by(chapter) %>% dplyr::count(sentiment) %>% dplyr::sum(n)
sentiment_4 %>% dplyr::group_by(chapter) %>% dplyr::count(sentiment) %>% dplyr:: mutate(total_words=sum(n))
sentiment_4 %>% dplyr::group_by(chapter) %>% dplyr::count(sentiment) %>% dplyr:: arrange(desc(sentiments))
sentiment_4 %>% dplyr::group_by(chapter) %>% dplyr::count(sentiment) %>% dplyr::arrange(desc(sentiments))
sentiment_4 %>% dplyr::group_by(chapter) %>% dplyr::count(sentiment) %>% dplyr::arrange(desc(n))
sentiment_4 %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
stopwords("en")
install.packages("https://www.rdocumentation.org/packages/tm", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("tm", lib.loc="~/Library/R/3.4/library")
stopwords("en")
stop=stopwords("en")
comm_words<-sentiment_4 %>% dplyr::filter(-stop) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
sentiment_4 %>% dplyr::filter(word!=stop) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
sentiment_4 %>% dplyr::filter(-word==stop) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
sentiment_4 %>% dplyr::filter(word!=stop) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
stop=stopwords("en")
sentiment_4 %>% dplyr::filter(word!=stop) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
cap <- char_class("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
Char_4<-str_subset(books[[4]], pattern = START %R% cap)
library(rebus)
cap <- char_class("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
Char_4<-str_subset(books[[4]], pattern = START %R% cap)
Char_4
cap <- char_class("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
Char_4<-str_extract(books[[4]]$word, pattern=START %R% cap)
Char_4
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = F)
books[[i]] <- data
}
cap <- char_class("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
Char_4<-str_extract(books[[4]]$word, pattern=START %R% cap)
char_list<-sentiment_4 %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
char_list
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = F)
books[[i]] <- data
}
cap <- char_class("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
Char_4<-str_extract(books[[4]]$word, pattern=START %R% UPPER %R% ANY_CHAR %R% ANY_CHAR)
char_list<-sentiment_4 %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
char_list
stop
upper(stop)
up_uppercase(stop)
up_cased(stop)
stop
stri_trans_totitle(stop)
library("stringi", lib.loc="~/Library/R/3.4/library")
stri_trans_totitle(
stop)
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = F)
books[[i]] <- data
}
cap_stop=stri_trans_totitle(stop)
Char_4<-str_extract(books[[4]]$word, pattern=START %R% UPPER %R% ANY_CHAR %R% ANY_CHAR)
char_list<-sentiment_4 %>% filter(!cap_stop) dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
char_list<-sentiment_4 %>% filter(!=cap_stop) dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
char_list<-sentiment_4 %>% filter(!=cap_stop) dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
sentiment_4
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = F)
books[[i]] <- data
}
cap_stop=stri_trans_totitle(stop)
Char_4<-str_extract(books[[4]]$word, pattern=START %R% UPPER %R% ANY_CHAR %R% ANY_CHAR)
char_list<-sentiment_4 %>% filter(word!=cap_stop) dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
sentiment_4
cap_stop=stri_trans_totitle(stop)
cap_stop
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = F)
books[[i]] <- data
}
cap_stop=stri_trans_totitle(stop)
Char_4<-str_extract(books[[4]]$word, pattern=START %R% UPPER %R% ANY_CHAR %R% ANY_CHAR)
char_list<-sentiment_4 %>% filter(!(word %in% cap_stop)) dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = F)
books[[i]] <- data
}
cap_stop=stri_trans_totitle(stop)
Char_4<-str_extract(books[[4]]$word, pattern=START %R% UPPER %R% ANY_CHAR %R% ANY_CHAR)
char_list<-sentiment_4 %>% filter(!word %in% cap_stop) dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = F)
books[[i]] <- data
}
cap_stop=stri_trans_totitle(stop)
Char_4<-str_extract(books[[4]]$word, pattern=START %R% UPPER %R% ANY_CHAR %R% ANY_CHAR)
char_list<-sentiment_4 %>% filter(!word %in% cap_stop) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
char_list
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = F)
books[[i]] <- data
}
cap_stop=stri_trans_totitle(stop)
Char_4<-str_extract(books[[4]]$word, pattern= UPPER %R% ANY_CHAR %R% ANY_CHAR)
char_list<-sentiment_4 %>% filter(!word %in% cap_stop) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
char_list
Char_4
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = F)
books[[i]] <- data
}
cap_stop=stri_trans_totitle(stop)
Char_4<-str_extract(books[[4]]$word, pattern=START %R% UPPER %R% ANY_CHAR %R% ANY_CHAR)
char_list<-Char_4 %>% filter(!word %in% cap_stop) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = F)
books[[i]] <- data
}
cap_stop=stri_trans_totitle(stop)
Char_4<-str_extract(books[[4]]$word, pattern=START %R% UPPER %R% ANY_CHAR %R% ANY_CHAR)
char_list<-Char_4 %>% filter(!is.na(word)) %>% filter(!word %in% cap_stop) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
Char_4<-str_extract(books[[4]]$word, pattern=START %R% UPPER %R% ANY_CHAR %R% ANY_CHAR)
Char_4
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = F)
books[[i]] <- data
}
cap_stop=stri_trans_totitle(stop)
Char_4<-str_extract(books[[4]]$word, pattern=START %R% UPPER)
char_list<-Char_4 %>% filter(!is.na(word)) %>% filter(!word %in% cap_stop) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
Char_4
books[[4]]$word
Char_4<-str_extract(books[[4]]$word, pattern=START %R% UPPER %R% END)
Char_4
cap_stop=stri_trans_totitle(stop)
Char_4<-str_subset(books[[4]]$word, pattern=START %R% UPPER)
Char_4
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = F)
books[[i]] <- data
}
cap_stop=stri_trans_totitle(stop)
Char_4<-str_subset(books[[4]]$word, pattern=START %R% UPPER)
char_list<-Char_4 %>% filter(!is.na(word)) %>% filter(!word %in% cap_stop) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
char_list<-Char_4 %>% filter(!word %in% cap_stop) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
Char_4 %>% filter(!word %in% cap_stop)
Char_4
data_frame(Char_4) %>% filter(!word %in% cap_stop)
data_frame(Char_4)
names(data_frame(Char_4))
char_list<-data_frame(Char_4) %>% filter(Char_4 %in% cap_stop) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
Char_4<-str_subset(books[[4]]$word, pattern=START %R% UPPER)
Char_4
class(Char_4)
books[[4]]$word
books[[4]]
Char_4<-str_subset(books[[4]]$word, pattern=START %R% UPPER)
char_list<-data_frame(Char_4) %>% filter(Char_4 %in% cap_stop)
char_list
Char_4<-str_subset(books[[4]]$word, pattern=START %R% UPPER)
char_list<-data_frame(Char_4) %>% filter(!Char_4 %in% cap_stop)
char_list
char_list<-data_frame(Char_4) %>% filter(!Char_4 %in% cap_stop) %>% unique()
char_list
right_join(books[[4]], char_list)
right_join(books[[4]], char_list, by=word)
char_list
data_frame(word=Char_4)
char_list<-data_frame(word=Char_4) %>% filter(!word %in% cap_stop) %>% unique()
char_list
right_join(books[[4]], char_list, by=word)
books[[4]]
names(books[[4]])
names(char_list)
right_join(books[[4]], char_list, by=word)
right_join(books[[4]], char_list)
char_list_2<-right_join(books[[4]], char_list) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
char_list_2
comm_words
stop=stopwords("en")
comm_words<-sentiment_4 %>% suppressWarnings(dplyr::filter(word!=stop)) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
sentiment_4
comm_words<-sentiment_4 %>% suppressWarnings(dplyr::filter(!word %in% stop)) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
sentiment_4 %>% dplyr::filter(!word %in% stop)
sentiment_4
comm_words<-cs_book %>% dplyr::filter(!word %in% stop)
comm_words
comm_words<-cs_book %>% dplyr::filter(!word %in% stop) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
comm_words
stop=c(stopwords("en"), 'said')
stop
comm_words<-cs_book %>% dplyr::filter(!word %in% stop) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
comm_words
stop=c(stopwords("en"), 'said', 'mr', 'mrs')
comm_words<-cs_book %>% dplyr::filter(!word %in% stop) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
comm_words
afinn <- inner_join(data, get_sentiments("nrc"))
cs_book= books[[4]]
anti_4=inner_join(cs_book, afinn)
anti_4
nrc <- inner_join(data, get_sentiments("nrc"))
cs_book= books[[4]]
anti_4=inner_join(cs_book, nrc)
anti_4
nrc
cs_book
nrc <- inner_join(data, get_sentiments("nrc"))
cs_book= books[[4]]
anti_4=inner_join(cs_book, nrc, by=word)
nrc <- inner_join(data, get_sentiments("nrc"))
cs_book= books[[4]]
anti_4=inner_join(cs_book, nrc)
nrc
anti_4
bing <- get_sentiments("bing")
cs_book= books[[4]]
sentiment_4=inner_join(cs_book, bing)
sentiment_4
nrc <- get_sentiments("nrc")
cs_book= books[[4]]
anti_4=inner_join(cs_book, nrc)
anti_4
nrc <- get_sentiments("nrc") %>% filter(sentiment=='anticipation')
nrc
cs_book= books[[4]]
anti_4=inner_join(cs_book, nrc)
anti_4
percents_4 <- anti_4 %>% dplyr::group_by(chapter) %>% dplyr::count(sentiment) %>% dplyr:: mutate(total_words=sum(n))
percents_4
anti_4
percents_4
anti_4 %>% dplyr::group_by(chapter)
percents_4 <- anti_4 %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr:: mutate(total_words=sum(n))
percents_4
percents_4 <- anti_4 %>% dplyr::group_by(chapter) %>% dplyr::count(sentiment) %>% dplyr:: mutate(total_words=sum(n))
percents_4
word_count<-cs_book %>% dplyr::group_by(chapter) %>% dplyr::count(word)
word_count
word_count<-cs_book %>% dplyr::group_by(chapter) %>% dplyr::summarise(n(word))
word_count<-cs_book %>% dplyr::group_by(chapter) %>% dplyr::summarise(sum(word))
word_count<-cs_book %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::summarise(sum(n))
word_count
word_count<-cs_book %>% dplyr::summarise(sum(word))
cs_book
word_count<-cs_book %>% dplyr::summarise(count(word))
cs_book %>% dplyr::count(word)
cs_book %>% dplyr::summarise(sum(count(word)))
cs_book %>% dplyr::sum(count(word))
cs_book %>% dplyr::mutate(sum(count(word)))
cs_book
cs_book %>% dplyr::mutate(count(word))
summarise(cs_book)
summarise(cs_book,sum(word))
summarise(cs_book,count(word))
summarise(cs_book,count(word))
cs_book %>% dplyr::mutate(n=count(word))
cs_book %>% dplyr::summarise(count(word))
cs_book
cs_book %>% dplyr::summarise(n())
word_count<-cs_book %>% dplyr::summarise(total_words=n())
word_count
char_list_2
stop=c(stopwords("en"), 'said', 'mr', 'mrs')
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = F)
books[[i]] <- data
}
cap_stop=stri_trans_totitle(stop)
Char_4<-str_subset(books[[4]]$word, pattern=START %R% UPPER)
char_list<-data_frame(word=Char_4) %>% filter(!word %in% cap_stop) %>% unique()
char_list_2<-right_join(books[[4]], char_list) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
char_list_2
char_list_2[1:40]
char_list_2[1:40,]
char_list_2<-right_join(books[[4]], char_list) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(chapter, desc(n))
char_list_2
Char_4
stop
stop=c(stopwords("en"), 'said', 'mr', 'mrs', 'he', 'she', 'it', 'they')
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = F)
books[[i]] <- data
}
cap_stop=stri_trans_totitle(stop)
Char_4<-str_subset(books[[4]]$word, pattern=START %R% UPPER)
char_list<-data_frame(word=Char_4) %>% filter(!word %in% cap_stop) %>% unique()
char_list_2<-right_join(books[[4]], char_list) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(chapter, desc(n))
char_list_2
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = F)
books[[i]] <- data
}
cap_stop=stri_trans_totitle(stop)
Char_4<-str_subset(books[[4]]$word, pattern=one_or_more(START %R% UPPER))
char_list<-data_frame(word=Char_4) %>% filter(!word %in% cap_stop) %>% unique()
char_list_2<-right_join(books[[4]], char_list) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(chapter, desc(n))
char_list_2
Char_4<-str_subset(books[[4]]$word, pattern=START %R% UPPER)
Char_4
stop=c(stopwords("en"), 'said', 'mr', 'mrs', 'he', 'she', 'it', 'they', 'i', 'you')
Char_4<-str_subset(books[[4]]$word, pattern=START %R% UPPER)
char_list<-data_frame(word=Char_4) %>% filter(!word %in% cap_stop) %>% unique()
char_list
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = F)
books[[i]] <- data
}
cap_stop=stri_trans_totitle(stop)
Char_4<-str_subset(books[[4]]$word, pattern=START %R% UPPER )
char_list<-data_frame(word=Char_4) %>% filter(!word %in% cap_stop) %>% unique()
char_list_2<-right_join(books[[4]], char_list) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(chapter, desc(n))
char_list_2
char_list_2<-right_join(books[[4]], char_list) %>% dplyr::count(word) %>% dplyr::arrange(chapter, desc(n))
char_list_2<-right_join(books[[4]], char_list) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
char_list_2
Char_4<-str_subset(books[[4]]$word, pattern=START %R% UPPER %R% optional(one_or_more(ANY_CHAR) %R% SPC %R% UPPER))
Char_4
pattern1=START %R% UPPER %R% one_or_more(ANY_CHAR) %R% SPC %R% UPPER
pattern2=START %R% UPPER
Char_4<-str_subset(books[[4]]$word, pattern=or(pattern1, pattern2))
Char_4
pattern1=START %R% UPPER %R% one_or_more(ANY_CHAR) %R% SPC %R% UPPER
pattern2=START %R% UPPER
Char_4<-str_subset(books[[4]]$word, pattern=or(pattern1))
pattern1=START %R% UPPER %R% one_or_more(ANY_CHAR) %R% SPC %R% UPPER
pattern2=START %R% UPPER
Char_4<-str_subset(books[[4]]$word, pattern=pattern1)
Char_4
pattern1=START %R% UPPER %R% one_or_more(ANY_CHAR) %R% SPC %R% UPPER
pattern2=START %R% UPPER
Char_4<-str_subset(books[[4]]$word, pattern=pattern2)
Char_4
Char_4<-str_subset(books[[4]]$word, pattern=pattern1)
CHar_4
Char_4
pattern1=START %R% UPPER %R% one_or_more(ANY_CHAR) %R% END %R% SPC %R% UPPER
pattern2=START %R% UPPER
Char_4<-str_subset(books[[4]]$word, pattern=pattern1)
Char_4
cap_stop=stri_trans_totitle(stop)
pattern1=START %R% UPPER %R% optional(one_or_more(ANY_CHAR) %R% END %R% SPC %R% UPPER)
Char_4<-str_subset(books[[4]]$word, pattern=pattern1)
Char_4
cap_stop=stri_trans_totitle(stop)
pattern1=START %R% UPPER %R% one_or_more(ANY_CHAR) %R% END %R% SPC %R% optional(UPPER)
Char_4<-str_subset(books[[4]]$word, pattern=pattern1)
Char_4
pattern1=START %R% UPPER %R% one_or_more(ANY_CHAR) %R% SPC %R% optional(UPPER)
Char_4<-str_subset(books[[4]]$word, pattern=pattern1)
Char_4
cap_stop=stri_trans_totitle(stop)
pattern1=START %R% UPPER %R% one_or_more(ANY_CHAR) %R% optional(UPPER)
Char_4<-str_subset(books[[4]]$word, pattern=pattern1)
Char_4
pattern1=START %R% UPPER %R% one_or_more(ANY_CHAR) %R% SPC %R% optional(UPPER)
Char_4<-str_subset(books[[4]]$word, pattern=pattern1)
Char_4
cap_stop=stri_trans_totitle(stop)
pattern1=START %R% UPPER %R% one_or_more(ANY_CHAR) optional(%R% SPC %R% UPPER)
Char_4<-str_subset(books[[4]]$word, pattern=pattern1)
pattern1=START %R% UPPER %R% one_or_more(ANY_CHAR) optional(SPC %R% UPPER)
Char_4<-str_subset(books[[4]]$word, pattern=pattern1)
pattern1=START %R% UPPER %R% one_or_more(ANY_CHAR) %R% optional(SPC %R% UPPER)
Char_4<-str_subset(books[[4]]$word, pattern=pattern1)
Char_4
pattern1=START %R% UPPER %R% optional(one_or_more(ANY_CHAR) %R% SPC %R% UPPER)
Char_4<-str_subset(books[[4]]$word, pattern=pattern1)
Char_4
pattern1=START %R% UPPER %R% optional(zero_or_more(ANY_CHAR) %R% SPC %R% UPPER)
Char_4<-str_subset(books[[4]]$word, pattern=pattern1)
Char_4
pattern1=START %R% UPPER %R% zero_or_more(ANY_CHAR) %R% SPC %R% optional(UPPER)
Char_4<-str_subset(books[[4]]$word, pattern=pattern1)
Char_4
stop=c(stopwords("en"), 'said', 'mr', 'mrs', 'he', 'she', 'it', 'they', 'i', 'you', 'professor')
comm_words<-cs_book %>% dplyr::filter(!word %in% stop) %>% dplyr::group_by(chapter) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
#(3) Which characters appear the most
books = vector(mode = "list", length = 7)
for(i in 1:length(books)){
data <- data_frame(text = book_names[[i]])
data <- mutate(data, chapter = c(1:nrow(data)), title = names(book_names)[i])
data <- data %>%
unnest_tokens(word, text, to_lower = F)
books[[i]] <- data
}
cap_stop=stri_trans_totitle(stop)
pattern1=START %R% UPPER %R% optional(zero_or_more(ANY_CHAR) %R% SPC %R% UPPER)
Char_4<-str_subset(books[[4]]$word, pattern=pattern1)
char_list<-data_frame(word=Char_4) %>% filter(!word %in% cap_stop) %>% unique()
char_list_2<-right_join(books[[4]], char_list) %>% dplyr::count(word) %>% dplyr::arrange(desc(n))
char_list_2
=======
<<<<<<< HEAD
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE)
ggplot(Book6Char, aes(x=word, y=n)) +
geom_bar(show.legend = FALSE, color = "blue", size = 0.6)
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE)
ggplot(Book6Char, aes(x=word, y=n)) +
geom_bar(show.legend = FALSE, color = "blue")
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE)
ggplot(Book6Char, aes(x=word, y=n)) +
geom_bar(show.legend = FALSE)
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE)
ggplot(Book6Char, aes(x=word, y=n)) +
geom_line(show.legend = FALSE)
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE)
ggplot(Book6Char, aes(x=word, y=n)) +
geom_plot(show.legend = FALSE)
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE)
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE)
ggplot(Book6Char, aes(x=chapter, y=percent, fill = sentiment)) +
geom_bar(show.legend = FALSE, color = "blue", size = 0.3)
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE)
ggplot(Book6Char, aes(x=word, y=n, fill = sentiment)) +
geom_bar(show.legend = FALSE, color = "blue", size = 0.3)
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE)
ggplot(Book6Char, aes(x=word, y=n)) +
geom_bar(show.legend = FALSE, color = "blue", size = 0.3)
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE)
ggplot(Book6Char, aes(x=word, y=n)) +
geom_point(show.legend = FALSE, color = "blue", size = 0.3)
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE)
ggplot(Book6Char, aes(x=word, y=n)) +
geom_col(show.legend = FALSE, color = "blue", size = 0.3)
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE)
ggplot(Book6Char, aes(x=word, y=n)) +
geom_col(show.legend = FALSE)
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE) %>%
arrange (desc())
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE) %>%
arrange (desc(n))
ggplot(Book6Char, aes(x=word, y=n)) +
geom_col(show.legend = FALSE)
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE) %>%
arrange (desc(n))
Book6Char
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE) %>%
arrange (desc(n))
ggplot(Book6Char, aes(x=word, y=n)) +
geom_col(show.legend = FALSE)
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE) %>%
arrange (desc(n))
ggplot(Book6Char, aes(x=word, y=n)) +
geom_col(show.legend = FALSE, color = "blue")
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE) %>%
arrange (desc(n))
ggplot(Book6Char, aes(x=word, y=n)) +
geom_col(show.legend = FALSE, fill = "blue")
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE) %>%
arrange (desc(n))
ggplot(Book6Char, aes(x=word, y=n)) +
geom_col(show.legend = FALSE, fill = "lightblue")
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE) %>%
arrange (desc(n))
ggplot(Book6Char, aes(x=word, y=n)) +
geom_col(show.legend = FALSE, fill = "lightblue", size = 0.5)
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE) %>%
arrange (desc(n))
ggplot(Book6Char, aes(x=word, y=n)) +
geom_col(show.legend = FALSE, fill = "lightblue", width  = 0.5)
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "Dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE) %>%
arrange (desc(n))
Book6Char
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE) %>%
arrange (desc(n))
Book6Char
library(dplyr)
Book6Char <- series %>%
filter(book == "half_blood_prince")  %>%
group_by(word) %>%
select(word) %>%
filter(word == "harry" |
word == "ron" |
word == "hermione" |
word == "dumbledore" |
word == "voldemort" |
word == "dobby") %>%
count (word, sort = TRUE) %>%
arrange (desc(n))
Book6Char
ggplot(Book6Char, aes(x=word, y=n)) +
geom_col(show.legend = FALSE, fill = "lightblue", width  = 0.5)
book6 <- books %>%
filter(title == "order_of_the_phoenix") %>%
group_by(chapter)
book6 <- series %>%
filter(book == "order_of_the_phoenix") %>%
group_by(chapter)
nrow(book6)
Book6Count <- series %>%
filter(book == "order_of_the_phoenix") %>%
group_by(chapter)
nrow(book6)
Senti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("bing")) %>%
group_by(chapter) %>%
count (sentiment)
PosWordProp <- Senti %>%
ungroup() %>%
filter (sentiment == "positive") %>%
mutate(total=sum(n), percent = n/total)
PosWordProp
NegWordProp <- Senti %>%
ungroup() %>%
filter (sentiment == "negative") %>%
mutate(total=sum(n), percent = n/total)
NegWordProp
ggplot(PosWordProp, aes(x=chapter, y=percent)) +
geom_line(show.legend = FALSE,color = "red", size = 0.3)
ggplot(NegWordProp, aes(x=chapter, y=percent, fill = sentiment)) +
geom_line(show.legend = FALSE, color = "blue", size = 0.3)
Book6Anti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("nrc")) %>%
group_by(chapter) %>%
count (sentiment)
Book6Anti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("nrc")) %>%
group_by(chapter)
Book6Anti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("nrc"))
Book6Anti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("nrc"))
Book6Anti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("nrc"))
Book6Anti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("nrc"))
Book6Anti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("nrc"))
Book6Anti
Book6Count <- series %>%
filter(book == "order_of_the_phoenix") %>%
group_by(chapter) %>%
count(sentiments)
Book6Count <- series %>%
filter(book == "order_of_the_phoenix") %>%
group_by(chapter) %>%
count(sentiment)
Book6Count <- series %>%
filter(book == "order_of_the_phoenix") %>%
group_by(chapter)
nrow(book6)
Book6Anti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("nrc"))  %>%
group_by(chapter) %>%
count (sentiment)
Book6Anti
Book6Anti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("nrc"))  %>%
group_by(chapter) %>%
count (sentiment) %>%
filter(sentiment == "anticipation")
Book6Anti
Book6Anti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("nrc"))  %>%
group_by(chapter) %>%
count (sentiment) %>%
filter(sentiment == "anticipation") %>%
sum(n)
Book6Anti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("nrc"))  %>%
group_by(chapter) %>%
count (sentiment) %>%
filter(sentiment == "anticipation") %>%
sum()
Book6Anti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("nrc"))  %>%
group_by(chapter) %>%
count (sentiment) %>%
filter(sentiment == "anticipation") %>%
summarise(count())
Book6Anti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("nrc"))  %>%
group_by(chapter) %>%
count (sentiment) %>%
filter(sentiment == "anticipation") %>%
summarise(count(n))
Book6Anti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("nrc"))  %>%
group_by(chapter) %>%
count (sentiment) %>%
filter(sentiment == "anticipation")
Book6Anti
Book6Anti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("nrc"))  %>%
group_by(chapter) %>%
count (sentiment) %>%
filter(sentiment == "anticipation") %>%
summarise(sum(n))
Book6Anti
Book6Anti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("nrc"))  %>%
group_by(chapter) %>%
count (sentiment) %>%
filter(sentiment == "anticipation")
Book6Anti
Book6Anti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("nrc"))  %>%
group_by(chapter) %>%
count (sentiment) %>%
filter(sentiment == "anticipation")
Book6Anti
ggplot(Book6Char, aes(x=chapter, y=n)) +
geom_col(show.legend = FALSE, fill = "lightblue", width  = 0.5)
Book6Anti <- series %>%
filter (book == "half_blood_prince") %>%
inner_join(get_sentiments("nrc"))  %>%
group_by(chapter) %>%
count (sentiment) %>%
filter(sentiment == "anticipation")
Book6Anti
ggplot(Book6Anti, aes(x=chapter, y=n)) +
geom_col(show.legend = FALSE, fill = "lightblue", width  = 0.5)
Book6Word <- series %>%
filter(book == "half_blood_prince") %>%
anti_join(stop_words) %>%
group_by(chapter)  %>%
count(word, chapter) %>%
top_n(1)
book6
Book6Word <- series %>%
filter(book == "half_blood_prince") %>%
group_by(chapter)  %>%
anti_join(stop_words) %>%
count(word, chapter) %>%
top_n(1)
book6
Book6Word <- series %>%
filter(book == "half_blood_prince") %>%
group_by(chapter)  %>%
count(word, chapter) %>%
anti_join(stop_words) %>%
top_n(1)
book6
Book6Word <- series %>%
filter(book == "half_blood_prince") %>%
group_by(chapter)  %>%
anti_join(stop_words) %>%
count(word, chapter) %>%
top_n(1)
Book6Word
=======
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(total))
# ANother way of tracking anticipation would be to look at the proportion of words which have an anticipation sentiment rather than looking at the raw usage of the words :
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence))
total_words%>%
#filter(title=="philosophers_stone") %>%
#inner_join(get_sentiments("nrc")) %>%
#group_by(chapter)%>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion),color="red"))+geom_line()
# ANother way of tracking anticipation would be to look at the proportion of words which have an anticipation sentiment rather than looking at the raw usage of the words :
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence))
total_words%>%
#filter(title=="philosophers_stone") %>%
#inner_join(get_sentiments("nrc")) %>%
#group_by(chapter)%>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion),color="red")+geom_line()
total_words
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence))
total_words%>%
#filter(title=="philosophers_stone") %>%
#inner_join(get_sentiments("nrc")) %>%
#group_by(chapter)%>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
# ANother way of tracking anticipation would be to look at the proportion of words which have an anticipation sentiment rather than looking at the raw usage of the words :
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence))
total_words%>%
#filter(title=="philosophers_stone") %>%
#inner_join(get_sentiments("nrc")) %>%
#group_by(chapter)%>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion),color="red")+geom_line()
# ANother way of tracking anticipation would be to look at the proportion of words which have an anticipation sentiment rather than looking at the raw usage of the words :
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence))
total_words%>%
#filter(title=="philosophers_stone") %>%
#inner_join(get_sentiments("nrc")) %>%
#group_by(chapter)%>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion))+geom_line()
# ANother way of tracking anticipation would be to look at the proportion of words which have an anticipation sentiment rather than looking at the raw usage of the words :
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion))+geom_line()
# ANother way of tracking anticipation would be to look at the proportion of words which have an anticipation sentiment rather than looking at the raw usage of the words :
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="red")+geom_line()
# ANother way of tracking anticipation would be to look at the proportion of words which have an anticipation sentiment rather than looking at the raw usage of the words :
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="red"))+geom_line()
# I can also use a different lexicon that assings a score rather than saying positive and negative. Affin lexicon
affin_lex<-
books %>%
filter(title=="philosophers_stone")%>%
inner_join(get_sentiments("afinn"))%>%  # This lexicon assigns a score from -5 to +5 based on negative and positive
group_by(chapter) %>%
summarize(total_score=sum(score)) # what is the total score for each chapter. Do some chapters tend to be more positive than negative
library(dplyr)
# I can also use a different lexicon that assings a score rather than saying positive and negative. Affin lexicon
affin_lex<-
books %>%
filter(title=="philosophers_stone")%>%
inner_join(get_sentiments("afinn"))%>%  # This lexicon assigns a score from -5 to +5 based on negative and positive
group_by(chapter) %>%
summarize(total_score=sum(score)) # what is the total score for each chapter. Do some chapters tend to be more positive than negative
library(tidyverse)
# I can also use a different lexicon that assings a score rather than saying positive and negative. Affin lexicon
affin_lex<-
books %>%
filter(title=="philosophers_stone")%>%
inner_join(get_sentiments("afinn"))%>%  # This lexicon assigns a score from -5 to +5 based on negative and positive
group_by(chapter) %>%
summarize(total_score=sum(score)) # what is the total score for each chapter. Do some chapters tend to be more positive than negative
library(tidytext)
library(stringr)
library(ggplot2)
# I can also use a different lexicon that assings a score rather than saying positive and negative. Affin lexicon
affin_lex<-
books %>%
filter(title=="philosophers_stone")%>%
inner_join(get_sentiments("afinn"))%>%  # This lexicon assigns a score from -5 to +5 based on negative and positive
group_by(chapter) %>%
summarize(total_score=sum(score)) # what is the total score for each chapter. Do some chapters tend to be more positive than negative
ggplot(affin_lex, aes(x = chapter, y = total_score)) +
geom_line(col="darkblue")   # plotting the sentiment over each chapter in the book based on score
# ANother way of tracking anticipation would be to look at the proportion of words which have an anticipation sentiment rather than looking at the raw usage of the words :
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="red"))+geom_line()
# it appears that JK rowling really takes the reader for a ride emotionally with her first book. Notice the proportion of words that have an anticipation sentiment rise and fall quite sharply from chapter to chapter.
philosophers_stone<-
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))
philosophers_stone
philosophers_stone %>%
group_by(word) %>%
count(word)
philosophers_stone %>%
mutate(total_word_count=count(word)) %>%
group_by(word) %>%
count(word)
philosophers_stone %>%
mutate(total_word_count=count(word))
philosophers_stone %>%
count(word) %>%
group_by(word) %>%
count(word)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)
arrange(n)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(10)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
ggplot(aes(word,n))+geom_bar()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
ggplot(aes(word,n))+geom_bar(stat="identity")
?top_n
names(philosophers_stone)
table(philosophers_stone$chapter)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
arrange() %>%
top_n(17) %>%
ggplot(aes(word,n))+geom_bar(stat="identity")
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
arrange() %>%
top_n(17)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
arrange() %>%
top_n(1)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
arrange(desc(n))
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(10) %>%
ggplot(aes(word,n))+geom_bar(stat="identity")
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(5) %>%
ggplot(aes(word,n))+geom_bar(stat="identity")
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(3) %>%
ggplot(aes(word,n))+geom_bar(stat="identity")
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(3) %>%
ggplot(aes(word,n))+geom_col(stat="identity")
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(3) %>%
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(3)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(1) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(1) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity")
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(1)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
table() %>%
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
table(total_words
)
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity",col="deeppink3")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n,,col="deeppink3"))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n,col="deeppink3"))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(col="deeppink3",stat="identity")+
coord_flip()
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="deeppink3"))+geom_line()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word,sort=TRUE)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word,sort=TRUE)
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="yellow4"))+geom_line()
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="yellow3"))+geom_line()
total_words=
books %>%
filter(title=="philosophers_stone") %>%
inner_join(get_sentiments("nrc"))%>%
group_by(chapter,sentiment) %>%
count(word) %>%
summarise(word_occurence=sum(n))%>%
mutate(total_words=sum(word_occurence)) %>%
filter(sentiment=="anticipation") %>%
mutate(proportion= word_occurence/total_words)
ggplot(total_words,aes(x=chapter,y=proportion,col="deeppink3"))+geom_line()
philosophers_stone %>%
group_by(chapter,word,sentiment) %>%
count(word,sort=TRUE)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n,fill=sentiment))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(chapter,word) %>%
count(word,sort=TRUE)%>%
top_n(2) %>%  # Since I grouped the data by chapter, top_n lets me see the top x # of words for each chapter. For example top_n(5) means I will see the top 5 words in each chapter.
ggplot(aes(word,n))+
geom_col(stat="identity")+
coord_flip()
philosophers_stone %>%
group_by(sentiment) %>%
top_n(10)%>%
ungroup()%>%
mutate(word=reorder(word,n)) %>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(sentiment) %>%
top_n(10)%>%
ungroup()
philosophers_stone %>%
group_by(sentiment) %>%
top_n(10)%>%
ungroup()%>%
count(word)
philosophers_stone %>%
group_by(sentiment) %>%
top_n(10)%>%
count(word)
philosophers_stone %>%
group_by(sentiment) %>%
top_n(10)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(sentiment) %>%
top_n(5)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(chapter,sentiment) %>%
top_n(5)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(chapter,sentiment) %>%
top_n(2)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(chapter,sentiment) %>%
top_n(1)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(chapter,sentiment)
philosophers_stone %>%
group_by(sentiment)
philosophers_stone %>%
group_by(sentiment) %
philosophers_stone %>%
group_by(sentiment)
philosophers_stone %>%
group_by(chapter)
philosophers_stone %>%
group_by(chapter) %>%
top_n(3)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(chapter,sentiment) %>%
top_n(3)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(sentiment) %>%
top_n(3)%>%
count(word)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(sentiment) %>%
top_n(3)%>%
count(word)
philosophers_stone %>%
group_by(sentiment) %>%
count(word)%>%
top_n(3)
philosophers_stone %>%
group_by(sentiment) %>%
count(word)%>%
top_n(10)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
philosophers_stone %>%
group_by(sentiment) %>%
count(word)%>%
top_n(10)%>%
ggplot(aes(word,n,fill=sentiment))+
geom_col(show.legend=FALSE)+
facet_wrap(~sentiment,scales="free")+
coord_flip()
>>>>>>> f099afb572167e6a62a4f402691e3489454facef
>>>>>>> 0ad718f273117a5d17790bf28f498552182fc5ae
